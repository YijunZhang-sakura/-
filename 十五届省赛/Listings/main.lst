C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 1   


C51 COMPILER V9.60.7.0, COMPILATION OF MODULE MAIN
OBJECT MODULE PLACED IN .\Objects\main.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE main.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\main
                    -.lst) TABS(2) OBJECT(.\Objects\main.obj)

line level    source

   1          #include <STC15F2K60S2.H>
   2          #include"ds1302.h"
   3          #include"iic.h"
   4          
   5          sbit row3 = P3^2;
   6          sbit row4 = P3^3;
   7          sbit col1 = P4^4;
   8          sbit col2 = P4^2;
   9          //ds1302相关参数
  10          code unsigned char Seg_Table[] =
  11          {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,0x80,0x90,0x88,0x83,0xc6,0xa1,0x86,0x8e,0xbf,0x8c,0x89,0xc7};  //
             -0-15. 16 -. 17 P.18 H.19 L.
  12          code unsigned char timewrite_addr[]={0x80,0x82,0x84,0x8a,0x86,0x88,0x8c};
  13          code unsigned char timeread_addr[]={0x81,0x83,0x85,0x8b,0x87,0x89,0x8d};
  14          unsigned char time[] = {0x05,0x03,0x13,0x06,0x13,0x04,0x24};
  15          unsigned char h = 0;
  16          unsigned char min = 0;
  17          unsigned char sec = 0;
  18          //界面转换相关参数
  19          unsigned char facenumber = 0;
  20          unsigned char facenumber1 = 1;
  21          unsigned char facenumber3 = 1;
  22          //计时相关参数
  23          unsigned char count555 = 0;
  24          unsigned char state_led = 0xff;
  25          unsigned char countl1 = 0;
  26          unsigned char countl2 = 0;
  27          //频率相关参数
  28          int freq = 0;
  29          int freqout = 2350;
  30          int freqpar = 2000;
  31          int freqstandpar = 0;
  32          int maxfreq = 0;
  33          int tempfreq = 0;
  34          float vinfloat = 0;
  35          unsigned char vin = 0;
  36          //标志位参数
  37          bit flag_freqout = 0;
  38          //
  39          //138选择以及单个数码管显示
  40          void set_138(unsigned char channel, unsigned char dat)
  41          {
  42   1        P2 = (P2&0x1f) | 0x00;
  43   1        P0 = dat;
  44   1        switch(channel)
  45   1        {
  46   2          case 0:P2 = (P2&0x1f) | 0x00;break;
  47   2          case 4:P2 = (P2&0x1f) | 0x80;break;
  48   2          case 5:P2 = (P2&0x1f) | 0xa0;break;
  49   2          case 6:P2 = (P2&0x1f) | 0xc0;break;
  50   2          case 7:P2 = (P2&0x1f) | 0xe0;break;
  51   2        }
  52   1        P2 = (P2&0x1f) | 0x00;
  53   1      }
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 2   

  54          
  55          void Delay1ms()   //@12.000MHz
  56          {
  57   1        unsigned char i, j;
  58   1      
  59   1        i = 12;
  60   1        j = 169;
  61   1        do
  62   1        {
  63   2          while (--j);
  64   2        } while (--i);
  65   1      }
  66          
  67          
  68          void Nixie(unsigned char location, unsigned char number)
  69          {
  70   1        set_138(6,0x01<<(location-1));
  71   1        set_138(7,number);
  72   1        Delay1ms();
  73   1        set_138(6,0x01<<(location-1));
  74   1        set_138(7,0xff);
  75   1      }
  76          //
  77          //数码管显示界面
  78          void Nixieshowing()
  79          {
  80   1        switch(facenumber)
  81   1        {
  82   2          case 0:
  83   2          { if(flag_freqout==1)
  84   3            {
  85   4              Nixie(1,Seg_Table[15]);
  86   4              Nixie(7,Seg_Table[19]);
  87   4              Nixie(8,Seg_Table[19]);
  88   4            }
  89   3            else 
  90   3            {
  91   4              if(freqout>9999)
  92   4              {
  93   5                Nixie(1,Seg_Table[15]);
  94   5                Nixie(4,Seg_Table[freqout/10000]);
  95   5                Nixie(5,Seg_Table[(freqout/1000)%10]);
  96   5                Nixie(6,Seg_Table[(freqout/100)%10]);
  97   5                Nixie(7,Seg_Table[(freqout/10)%10]);
  98   5                Nixie(8,Seg_Table[freqout%10]);   
  99   5              }
 100   4              else if(freqout>999)
 101   4              {
 102   5                Nixie(1,Seg_Table[15]);
 103   5                Nixie(5,Seg_Table[freqout/1000]);
 104   5                Nixie(6,Seg_Table[(freqout/100)%10]);
 105   5                Nixie(7,Seg_Table[(freqout/10)%10]);
 106   5                Nixie(8,Seg_Table[freqout%10]);
 107   5              }
 108   4              else if(freqout>99)
 109   4              {
 110   5                Nixie(1,Seg_Table[15]);
 111   5                Nixie(6,Seg_Table[freqout/100]);
 112   5                Nixie(7,Seg_Table[(freqout/10)%10]);
 113   5                Nixie(8,Seg_Table[freqout%10]);
 114   5              }
 115   4              else if(freqout>9)
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 3   

 116   4              {
 117   5                Nixie(1,Seg_Table[15]);
 118   5                Nixie(7,Seg_Table[freqout/10]);
 119   5                Nixie(8,Seg_Table[freqout%10]);
 120   5              }
 121   4              else
 122   4              {
 123   5                Nixie(1,Seg_Table[15]);
 124   5                Nixie(8,Seg_Table[freqout]);
 125   5              }
 126   4            }
 127   3          }
 128   2          break;
 129   2          case 1:
 130   2          {
 131   3            switch(facenumber1)
 132   3            {
 133   4              case 1:
 134   4                Nixie(1,Seg_Table[17]);
 135   4                Nixie(2,Seg_Table[1]);
 136   4                Nixie(5,Seg_Table[freqpar/1000]);
 137   4                Nixie(6,Seg_Table[(freqpar/100)%10]);
 138   4                Nixie(7,Seg_Table[(freqpar/10)%10]);
 139   4                Nixie(8,Seg_Table[freqpar%10]);
 140   4              break;
 141   4              case 2:
 142   4                if(freqstandpar>0)
 143   4                {
 144   5                  Nixie(1,Seg_Table[17]);
 145   5                  Nixie(2,Seg_Table[2]);
 146   5                  Nixie(6,Seg_Table[freqstandpar/100]);
 147   5                  Nixie(7,Seg_Table[(freqstandpar/10)%10]);
 148   5                  Nixie(8,Seg_Table[freqstandpar%10]);
 149   5                }
 150   4                else if(freqstandpar==0)
 151   4                {
 152   5                  Nixie(1,Seg_Table[17]);
 153   5                  Nixie(2,Seg_Table[2]);
 154   5                  Nixie(8,Seg_Table[0]);
 155   5                }
 156   4                else
 157   4                {
 158   5                  Nixie(1,Seg_Table[17]);
 159   5                  Nixie(2,Seg_Table[2]);
 160   5                  Nixie(5,Seg_Table[16]);
 161   5                  Nixie(6,Seg_Table[(-freqstandpar)/100]);
 162   5                  Nixie(7,Seg_Table[((-freqstandpar)/10)%10]);
 163   5                  Nixie(8,Seg_Table[(-freqstandpar)%10]);
 164   5                }
 165   4              break;
 166   4            }
 167   3          }
 168   2          break;
 169   2          case 2:
 170   2            Nixie(1,Seg_Table[time[2]/16]);
 171   2            Nixie(2,Seg_Table[time[2]%16]);
 172   2            Nixie(3,Seg_Table[16]);
 173   2            Nixie(4,Seg_Table[time[1]/16]);
 174   2            Nixie(5,Seg_Table[time[1]%16]);
 175   2            Nixie(6,Seg_Table[16]);
 176   2            Nixie(7,Seg_Table[time[0]/16]);
 177   2            Nixie(8,Seg_Table[time[0]%16]);
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 4   

 178   2          break;
 179   2          case 3:
 180   2          {
 181   3           switch(facenumber3)
 182   3          {
 183   4            case 1:
 184   4            {
 185   5                if(maxfreq>9999)
 186   5              {
 187   6                Nixie(1,Seg_Table[18]);
 188   6                Nixie(2,Seg_Table[15]);
 189   6                Nixie(4,Seg_Table[maxfreq/10000]);
 190   6                Nixie(5,Seg_Table[(maxfreq/1000)%10]);
 191   6                Nixie(6,Seg_Table[(maxfreq/100)%10]);
 192   6                Nixie(7,Seg_Table[(maxfreq/10)%10]);
 193   6                Nixie(8,Seg_Table[maxfreq%10]);   
 194   6              }
 195   5              else if(maxfreq>999)
 196   5              {
 197   6                Nixie(1,Seg_Table[18]);
 198   6                Nixie(2,Seg_Table[15]);
 199   6                Nixie(5,Seg_Table[maxfreq/1000]);
 200   6                Nixie(6,Seg_Table[(maxfreq/100)%10]);
 201   6                Nixie(7,Seg_Table[(maxfreq/10)%10]);
 202   6                Nixie(8,Seg_Table[maxfreq%10]);
 203   6              }
 204   5              else if(maxfreq>99)
 205   5              {
 206   6                Nixie(1,Seg_Table[18]);
 207   6                Nixie(2,Seg_Table[15]);
 208   6                Nixie(6,Seg_Table[maxfreq/100]);
 209   6                Nixie(7,Seg_Table[(maxfreq/10)%10]);
 210   6                Nixie(8,Seg_Table[maxfreq%10]);
 211   6              }
 212   5              else if(maxfreq>9)
 213   5              {
 214   6                Nixie(1,Seg_Table[18]);
 215   6                Nixie(2,Seg_Table[15]);
 216   6                Nixie(7,Seg_Table[maxfreq/10]);
 217   6                Nixie(8,Seg_Table[maxfreq%10]);
 218   6              }
 219   5              else
 220   5              {
 221   6                Nixie(1,Seg_Table[18]);
 222   6                Nixie(2,Seg_Table[15]);
 223   6                Nixie(8,Seg_Table[maxfreq]);
 224   6              }
 225   5            }
 226   4            break;
 227   4            case 2:
 228   4            {
 229   5                Nixie(1,Seg_Table[18]);
 230   5                Nixie(2,Seg_Table[10]);
 231   5                Nixie(3,Seg_Table[h/16]);
 232   5                Nixie(4,Seg_Table[h%16]);
 233   5                Nixie(5,Seg_Table[min/16]);
 234   5                Nixie(6,Seg_Table[min%16]);
 235   5                Nixie(7,Seg_Table[sec/16]);
 236   5                Nixie(8,Seg_Table[sec%16]);
 237   5            }
 238   4            break;
 239   4           }
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 5   

 240   3          }
 241   2          break;
 242   2        }
 243   1      }
 244          //
 245          //keyfunction
 246          void s4function()
 247          {
 248   1        if(facenumber==3)
 249   1        {
 250   2          facenumber = 0;
 251   2        }
 252   1        else
 253   1        {
 254   2          facenumber++;
 255   2        }
 256   1        if(facenumber==1)
 257   1        {
 258   2          facenumber1 = 1;
 259   2        }
 260   1        if(facenumber==3)
 261   1        {
 262   2          facenumber3 = 1;
 263   2        }
 264   1      }
 265          
 266          void s5function()
 267          {
 268   1        if(facenumber==1)
 269   1        {
 270   2          if(facenumber1==2)
 271   2          {
 272   3            facenumber1 = 1;
 273   3          }
 274   2          else
 275   2          {
 276   3            facenumber1++;
 277   3          }
 278   2        }
 279   1        if(facenumber==3)
 280   1        {
 281   2          if(facenumber3==2)
 282   2          {
 283   3            facenumber3 = 1;
 284   3          }
 285   2          else
 286   2          {
 287   3            facenumber3++;
 288   3          }
 289   2        }
 290   1      }
 291          
 292          void s8function()
 293          {
 294   1        if(facenumber==1)
 295   1        {
 296   2          if(facenumber1==1)
 297   2          {
 298   3            if(freqpar==9000)
 299   3            {freqpar = 1000;}
 300   3            else
 301   3            {freqpar += 1000;}
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 6   

 302   3          }
 303   2          if(facenumber1==2)
 304   2          {
 305   3            if(freqstandpar==900)
 306   3            {freqstandpar=-900;}
 307   3            else
 308   3            {freqstandpar += 100;}
 309   3          }
 310   2        }
 311   1      }
 312          
 313          void s9function()
 314          {
 315   1          if(facenumber==1)
 316   1        {
 317   2          if(facenumber1==1)
 318   2          {
 319   3            if(freqpar==1000)
 320   3            {freqpar = 9000;}
 321   3            else
 322   3            {freqpar -= 1000;}
 323   3          }
 324   2          if(facenumber1==2)
 325   2          {
 326   3            if(freqstandpar==-900)
 327   3            {freqstandpar = 900;}
 328   3            else
 329   3            {freqstandpar -= 100;}
 330   3          }
 331   2        }
 332   1      }
 333          //
 334          //keyscan
 335          void delay(unsigned int t)
 336          {
 337   1        while(t--);
 338   1      }
 339          
 340          void keyscan()
 341          {
 342   1        row3=0;
 343   1        row4=col1=col2=1;
 344   1        if(col1==0)              //s5
 345   1        {
 346   2          delay(20);
 347   2          if(col1==0)
 348   2          {
 349   3            while(col1==0)
 350   3            {Nixieshowing();}
 351   3            s5function();
 352   3          }
 353   2        }
 354   1        if(col2==0)      //s9
 355   1        {
 356   2          delay(20);
 357   2          if(col2==0)
 358   2          {
 359   3            while(col2==0)
 360   3            {Nixieshowing();}
 361   3            s9function();
 362   3          }
 363   2        }
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 7   

 364   1        row4=0;
 365   1        row3=col1=col2=1;
 366   1        if(col1==0)         //s4
 367   1        {
 368   2          delay(20);
 369   2          if(col1==0)
 370   2          {
 371   3            while(col1==0)
 372   3            {Nixieshowing();}
 373   3            s4function();
 374   3          }
 375   2        }
 376   1        if(col2==0)        //s8
 377   1        {
 378   2          delay(20);
 379   2          if(col2==0)
 380   2          {
 381   3            while(col2==0)
 382   3            {Nixieshowing();}
 383   3            s8function();
 384   3          }
 385   2        }
 386   1      }
 387          //ds1302
 388          void ds1302_write()
 389          {
 390   1        unsigned char i=7;
 391   1        Write_Ds1302_Byte(0x8e,0x00);
 392   1        for(i=0;i<7;i++)
 393   1        {
 394   2          Write_Ds1302_Byte(timewrite_addr[i],time[i]);
 395   2          Nixieshowing();
 396   2        }
 397   1        Write_Ds1302_Byte(0x8e,0x80);
 398   1      }
 399          
 400          void ds1302_read()
 401          {
 402   1        unsigned char i=7;
 403   1        for(i=0;i<7;i++)
 404   1        {
 405   2          time[i] = Read_Ds1302_Byte(timeread_addr[i]);
 406   2        }
 407   1      }
 408          //
 409          //NE555函数以及定时器
 410          void InitTimer()
 411          {
 412   1        TMOD = 0x15;
 413   1        AUXR = 0x00;
 414   1        TH1 =(65536-50000)/256;
 415   1        TL1 =(65536-50000)%256;
 416   1        
 417   1        TH0 = 0;
 418   1        TL0 = 0;
 419   1        
 420   1        EA = 1;
 421   1        
 422   1        ET1 = 1;
 423   1        TR1 = 1;
 424   1        
 425   1        ET0 = 0;
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 8   

 426   1        TR0 = 1;
 427   1      }
 428          
 429          void SerivceTimer0() interrupt 3
 430          {
 431   1        TH1 =(65536-50000)/256;
 432   1        TL1 =(65536-50000)%256;
 433   1        
 434   1        if(facenumber==0)
 435   1        {
 436   2          countl1++;
 437   2          if(countl1==4)
 438   2          {
 439   3            countl1 = 0;
 440   3            if((state_led&0x01)==0x01)      
 441   3            {
 442   4              state_led = (state_led&0xfe) | 0x00;         
 443   4              set_138(4,state_led);
 444   4            }
 445   3            else                        
 446   3            {
 447   4              state_led = (state_led&0xfe) | 0x01;
 448   4              set_138(4,state_led);
 449   4            }
 450   3          }
 451   2        }
 452   1        else                        
 453   1        {
 454   2          state_led = (state_led&0xfe) | 0x01;
 455   2          set_138(4,state_led);
 456   2        }
 457   1        if(freqout>freqpar)
 458   1        {
 459   2          countl2++;
 460   2          if(countl2==4)
 461   2          {
 462   3            countl2 = 0;
 463   3            if((state_led&0x02)==0x02)      
 464   3            {
 465   4              state_led = (state_led&0xfd) | 0x00;         
 466   4              set_138(4,state_led);
 467   4            }
 468   3            else                        
 469   3            {
 470   4              state_led = (state_led&0xfd) | 0x02;
 471   4              set_138(4,state_led);
 472   4            }
 473   3          }
 474   2        }
 475   1        else                        
 476   1        {
 477   2          state_led = (state_led&0xfd) | 0x02;
 478   2          set_138(4,state_led);
 479   2        }
 480   1        if(flag_freqout==1)
 481   1        {
 482   2          state_led = (state_led&0xfd) | 0x00;         
 483   2          set_138(4,state_led);
 484   2        }
 485   1        else                        
 486   1        {
 487   2          state_led = (state_led&0xfd) | 0x02;
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 9   

 488   2          set_138(4,state_led);
 489   2        }
 490   1        count555++;
 491   1        if(count555==20)
 492   1        {
 493   2          count555 = 0;
 494   2          freq = (TH0<<8) | TL0;
 495   2          TH0 = 0;
 496   2          TL0 = 0;
 497   2          tempfreq = freqout;
 498   2          freqout = freq + freqstandpar;
 499   2          if(freqout<0)
 500   2          {
 501   3            flag_freqout = 1;
 502   3          }
 503   2          else
 504   2          {
 505   3            flag_freqout = 0;
 506   3          }
 507   2          if(flag_freqout==0)
 508   2          {
 509   3            if(freqout>maxfreq)
 510   3            {
 511   4              maxfreq = freqout;
 512   4              h = Read_Ds1302_Byte(timeread_addr[2]);
 513   4              min = Read_Ds1302_Byte(timeread_addr[1]);
 514   4              sec = Read_Ds1302_Byte(timeread_addr[0]);
 515   4            }
 516   3            else
 517   3            {
 518   4              maxfreq = maxfreq;
 519   4            }
 520   3          }
 521   2        }
 522   1      }
 523          //
 524          //DAC mode
 525          void pcf8591Init()
 526          {
 527   1        I2CStart();
 528   1        I2CSendByte(0x90);
 529   1        I2CWaitAck();
 530   1        I2CSendByte(0x40);
 531   1        I2CWaitAck();
 532   1      }
 533          
 534          void freqtask()
 535          {
 536   1        if(freqout>freqpar)
 537   1        {
 538   2          vin = 255;
 539   2        }
 540   1        else if((freqout>500)&&(freqout<freqpar))
 541   1        {
 542   2          vinfloat = (4*freqout-2000);
 543   2          vin = (vinfloat/(freqpar-500)+1)*256/5;
 544   2        }
 545   1        else
 546   1        {
 547   2          vin = 52;
 548   2        }
 549   1        if(flag_freqout==1)
C51 COMPILER V9.60.7.0   MAIN                                                              03/20/2025 21:13:44 PAGE 10  

 550   1        {
 551   2          vin = 0;
 552   2        }
 553   1      }
 554          
 555          void pcf8591()
 556          {
 557   1        freqtask();
 558   1        I2CStart();
 559   1        I2CSendByte(0x90);
 560   1        I2CWaitAck();
 561   1        I2CSendByte(0x40);
 562   1        I2CWaitAck();
 563   1        I2CSendByte(vin);
 564   1        I2CWaitAck();
 565   1        I2CStop();
 566   1      }
 567          //
 568          //系统初始化
 569          void Initsys()
 570          {
 571   1        set_138(6,0x00);
 572   1        set_138(7,0xff);
 573   1        set_138(4,0xff);
 574   1        set_138(5,0x00);
 575   1        
 576   1        pcf8591Init();
 577   1        InitTimer();
 578   1        ds1302_write();
 579   1      }
 580          //
 581          //主函数
 582          void main()
 583          {
 584   1        Initsys();
 585   1        while(1)
 586   1        {
 587   2          pcf8591();
 588   2          ds1302_read();
 589   2          keyscan();
 590   2          Nixieshowing();
 591   2        }
 592   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2581    ----
   CONSTANT SIZE    =     34    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     34       2
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
